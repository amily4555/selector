/******
 * CSS 3 Selector inQuery
 * http://code.google.com/p/inedit/
 *
 * Licensed under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 *
 * $Author: achun (achun.shx at gmail.com)
 * $Create Date: 2008-10-30
 * $Revision: 2008-12-8
 ******/
/*DOMNode集合
 *对 DOMElement 操作的基础
 *返回一个空的inNode实例对象,
 *inNode实例对象和inNode对象的区别是inNode对象是function,inNode实例是{}
 *输入参数
 *  nodeType:可以是字符串形式的不同nodeType组合,比如'1,3',默认1
 *注意:必须实例化后才能用
	元素1  	ELEMENT_NODE
	属性2 	ATTRIBUTE_NODE
	文本3 	TEXT_NODE
	4 	CDATA_SECTION_NODE
	5 	ENTITY_REFERENCE_NODE
	6 	ENTITY_NODE
	7 	PROCESSING_INSTRUCTION_NODE
	注释8 	COMMENT_NODE
	文档9 	DOCUMENT_NODE
	10 	DOCUMENT_TYPE_NODE
	11 	DOCUMENT_FRAGMENT_NODE
	12 	NOTATION_NODE
 */
/******
 * 必须实例化 inQuery,inQuery 实例是一个 Array
 ******/

var $=inQuery=inMixin(
function(expr,context,deep,withcontext){//Log(expr);
	if(undefined==deep) deep=true;
	var ins = inQuery.initQuery(expr,context,deep,withcontext);
	return ins;
},inCore,{
	isinQuery:'8',
	Instance:{
		isinQuery:'8',
		find:function(expr){
			return inQuery(expr,this);
		}
	},
	inID:1,
	initQuery:function(expr,context,deep,withcontext){
		if(!expr)
			return [document];
		if(!context) context=[document];
		if(context.nodeType!==undefined) context=[context];
		if(typeof context=='string') context=inQuery.initQuery(context,[document],true,true);
		if (!context.length) return [];
		expr= expr.replace(/ +/g,' ')
						.replace(/(~|\+|\*)([^0-9=])/g,' $1 $2')
						.replace(/\]\[/g,',')
						.replace(/ +/g,' ')
						.split(/(,| |#|\.|>|:|\[|\*[^= ]|~[^= ]|\+[^0-9 ]|\*)|\]/);
		for (var i=0; i<expr.length;)
			' '==(expr[i]||' ')?expr.splice(i,1):i++;
		/*
		for (var i=0; i<expr.length; ){
			if (' '==expr[i] && ('* > + ~'.indexOf(expr[i+1])!=-1 || '* > + ~'.indexOf(expr[i-1])!=-1))
				expr.splice(i,1);
			else i++;
		}
		*/
		//Log(expr);
		var options={expr:expr,contextID:{},retID:{},at:0,deep:true,withcontext:false,
			root:context.slice(0),context:context,ret:[]};
		while(this.Query(options));
		return options.ret;
	},
	addNodes:function(n,options,ret){
		if (undefined===n.nodeType){
			if (options[ret].length==0) {
				options[ret]=Array.prototype.slice.call(n,0);
				if (','==(options.expr[options.at] || ',')) return true;
				var mark=options[ret+'ID'];
				for (var i=0;i<n.length ;i++ ){
					n[i].inQueryID=n[i].inQueryID || this.inID++;
					mark[n[i].inQueryID]=true;
				}
			}else
				for (var i=0;i<n.length ;i++ )
					this.addNodes(n[i],options,ret);
		}else{
			var mark=options[ret+'ID'];
			ret=options[ret];
			if(n.nodeType!=1||mark[n.inQueryID]) return false;
			n.inQueryID=n.inQueryID || this.inID++;
			mark[n.inQueryID]=true;
			ret.push(n);
		}
		return true;
	},/*递归查询分派*/
	Query:function(options){
		var fn=options.expr[options.at++];
		if(!fn){
			this.addNodes(options.context,options,'ret');
			return false;
		}
		if ('&, *#.>+~[:'.indexOf(fn)===-1){
			var v=fn;
			fn='tagNameQuery';
		}else{
			var v=options.expr[options.at++];
		}
		//Log(options);
		this[fn](v,options);
		return true;
	},
	tagNameQuery:function(v,options){//by tagName
		v=v.toUpperCase();
		if (options.withcontext)
		for (var i=0;i<options.context.length ;){
			if (options.context[i].tagName!=v)
				options.context.splice(i,1);
			else
				i++;
		}
		var context=options.context.splice(0,options.context.length);
		if(options.deep===true){
			for (var i=0;i<context.length ;i++ )
				this.addNodes(context[i].getElementsByTagName(v),options,'context');
		}else if(options.deep>0){
			for (var i=0;i<context.length ;i++ )
			this.walkNode(context[i],function(n){
				if (n.tagName==v)
					this.addNodes(n,options,'context');
			},options.deep);
		}
	},
	'&':function(v,options){
		this.addNodes(options.context,options,'ret');
		options.at--;options.deep=true;options.withcontext=false;
	},
	',':function(v,options){
		this.addNodes(options.context,options,'ret');
		options.at--;options.deep=true;options.withcontext=false;
		options.context=options.root.slice(0);
	},
	' ':function(v,options){
		options.at--;options.deep=true;options.withcontext=false;
	},
	'*':function(v,options){
		options.at--;options.deep=false;options.withcontext=false;
		var context=options.context.splice(0,options.context.length);
		for (var i=0;i<context.length ;i++)
			this.addNodes(context[i].getElementsByTagName('*'),options,'context');
	},
	'#':function(v,options){//id
		var elem=document.getElementById(v);
		if (!elem) return [];
		if (options.withcontext){
			for (var i=0;i<options.context.length ;i++ )
				if(options.context[i].id==v && options.context[i]===elem){
					options.context=[elem];
					return;
				}
		}
		if (options.deep){
		for (var i=0;i<options.context.length ;i++ )
			this.traceNode(elem.parentNode,function(n){
				if (options.context[i]===n){
					options.context=[elem];
					return;
				}
			});
		}
		options.context=[];
	},
	'.':function(v,options){//classname
		var context=options.context.splice(0,options.context.length);
		var v1=' '+v+' ';
		if (options.withcontext)
		for (var i=0;i<context.length ;i++ ){
			var cn=' '+(this.Attr(context[i],'class')||'')+' ';
			if (cn.indexOf(v1)!=-1)
				this.addNodes(context[i],options,'context');
		}
		if(options.deep)
		if(typeof document.getElementsByClassName=='function')
			for (var i=0;i<options.context.length ;i++ )
				this.addNodes(context[i].getElementsByTagName(v),options,'context');
		else{
			for (var i=0;i<context.length ;i++ )
			this.walkNode(context[i],function(n){
				var cn=' '+(this.Attr(n,'class')||'')+' ';
				if (cn.indexOf(v1)!=-1)
					this.addNodes(n,options,'context');
			},options.deep);
		}
		return context;
	},
	'>':function(v,options){//child
		var tag=v.toUpperCase();
		if ('&, *#.>+~[:'.indexOf(tag)!=-1){
			tag=false;
			options.at--;options.deep=false;options.withcontext=true;
		}else{
			options.at++;options.deep=true;options.withcontext=false;
		}
		var context=options.context.splice(0,options.context.length);
		for (var i=0;i<context.length ;i++)
			if (tag){
				var n=context[i].firstChild;
				while(n){
					if (n.nodeType==1 && (false===tag || n.tagName===tag || tag=='*'))
						if(false===this.addNodes(n,options,'context')) break;
					n=n.nextSibling;
				}
			}else
				this.addNodes(context[i].childNodes,options,'context');
	},
	'+':function(v,options,ret){
		var tag=v.toUpperCase();
		if ('&, *#.>+~[:'.indexOf(tag)!=-1){
			tag=false;
			options.at--;options.deep=false;options.withcontext=true;
		}else{
			options.at++;options.deep=true;options.withcontext=false;
		}
		var context=options.context.splice(0,options.context.length);
		for (var i=0;i<context.length ;i++ ){
			var n=context[i].nextSibling;
			while(n && n.nodeType!=1)
				n=n.nextSibling;
			if (n && n.nodeType==1 && (tag===false || n.tagName===tag || tag==='*'))
				this.addNodes(n,options,'context');
		}
	},
	'~':function(v,options){//匹配 prev 元素之后的所有匹配的 siblings 元素,
		var tag=v.toUpperCase();
		if ('&, *#.>+~[:'.indexOf(tag)!=-1){
			tag=false;
			options.at--;options.deep=false;options.withcontext=true;
		}else{
			options.at++;options.deep=true;options.withcontext=false;
		}
		var context=options.context.splice(0,options.context.length);
		for (var i=0;i<context.length ;i++ ){
			var ns=context[i];
			while(ns=ns.nextSibling){
				if (ns.nodeType==1 && (ns.tagName===tag|| tag=='*'))
					if(false==this.addNodes(ns,options,'context')) break;
			}
		}
	},
	'[':function(v,options){
		var context=[];
		var s=v.split(','),p={},attrs=[],attr;
		function c(a){
			var r=false;
			for (var k in p) {
				switch (p[k].op) {
				case '=' :r= a[k]==p[k].v;break;
				case '!=':r= !(a[k]==p[k].v);break;
				case '~=':r= a[k] && a[k].search(new RegExp('(\s+|^)'+p[k].v+'(\s+|$)'))!=-1;break;
				case '^=':r= a[k] && a[k].search(new RegExp('^'+p[k].v))!=-1;break;
				case '$=':r= a[k] && a[k].search(new RegExp(p[k].v+'$'))!=-1;break;
				case '*=':r= a[k] && a[k].search(p[k].v)!=-1;break;
				default:r=!!a[k];break;
				}
				if (!r) return false;
			}
			return true;
		}
		for (var i=0;i<s.length ;i++ ){
			s[i]=s[i].split(/(\*=|\$=|\^=|~=|!=|=)/);
			if(s[i][2]==='') s[i][2]=undefined;
			if (s[i][2]=='""' || s[i][2]=="''")
				s[i][2]='';
			if (undefined!=s[i][2])
				s[i][2]=s[i][2].replace(/\"|\'/g,'');
			p[s[i][0]]={op:s[i][1],v:s[i][2]};
			attrs.push(s[i][0]);
		}
		if (options.withcontext)
		for (var i=0;i<options.context.length ;i++ )
			if(c(this.Attr(options.context[i],attrs)))
				context.push(options.context[i]);
		if(options.deep)
		for (var i=0;i<options.context.length ;i++ ){
			this.walkNode(options.context[i],function(n){
				if(c(this.Attr(n,attrs)))
					context.push(n);
			},options.deep);
		}
		return context;
	},
	':':function(v,options){
		return [];
		v=v.toLowerCase().split(/\(|\)/);
		for (var i=0;i<v.length ; )
			if (''==v[i]) v.splice(i,1);else i++;
		if (v[0]=='odd' || v[0]=='even') {
			v[1]=v[0];
			v[0]='nth-child';
		}
		if (v[1]){
			v[1]=v[1].replace(/even/, "2n+0").replace(/odd/, "2n+1");
			var tmp=v[1].split('n');
			if (tmp.length==1){
				v[1]=0;
				v[2]=parseInt(tmp[0]);
			}else{
				v[1]=parseInt(tmp[0]==''?1:(tmp[0]=='-'?-1:tmp[0]));
				v[2]=parseInt(tmp[1])||0;
			}
		}
		if (typeof this[v[0]]!='function') return [];
		return this[v[0]](context,deep,withcontext,v[1],v[2]);
	},
	pseudoify:function(pseudo,ret,context,deep,withcontext){
		if(!pseudo)
			ret=ret.concat(context);
			//this.arrayMerge('none',ret,context);
		else
			ret=ret.concat(this[':'](pseudo,context,false,true));
			//this.arrayMerge(ret,this[':'](pseudo,context,false,true));
		return ret;
	},
	root:function(){
		return [document.firstChild];
	},
	checkAttr:function(context,deep,withcontext,attr,v){
		var ret=[];
		for (var i=0;i<context.length ;i++ ) {
			if (withcontext)
				if (v===this.Attr(context[i],attr))
					ret.push(context[i]);
			if(deep)
				this.walkNode(context[i],function(nd){
					if (v==this.Attr(nd,attr))
						ret.push(nd);
				},deep);
		}
		return ret;
	},
	nodeAt:function(context,deep,withcontext,a,b,reverse,ret){
		function aNb(){//Log(a+','+b+','+x);
			if (a==0) return x==b;
			if (a<0) return x<b;
			var n=(x-b);
			n=n/a;
			return n>=0 && n==parseInt(n);
		}
		ret=ret||[];//Log(reverse);
		var cnt=0;
		if (withcontext)
		for (var i=0;i<context.length ;i++ ) {
			var x=0;
			this.walkNode(context[i].parentNode,function(n){
				x++;
				if (n===context[i]){
					if(aNb()){
						ret[ret.length]=n;
						cnt++;
					}
					if ((a<0 && x>b) || (a==0 && cnt)) return true;
				}
			},false,reverse);
		}
		return ret;
	},
	'nth-child':function(context,deep,withcontext,a,b){
		return this.nodeAt(context,deep,withcontext,a,b);
	},
	'nth-last-child':function(context,deep,withcontext,a,b){
		return this.nodeAt(context,deep,withcontext,a,b,true);
	},
	'nth-of-type':function(context,deep,withcontext,a,b){
		return this.nodeAt(context,deep,withcontext,a,b);
	},
	'nth-last-of-type':function(context,deep,withcontext,a,b){
		return this.nodeAt(context,deep,withcontext,a,b,true);
	},
	'first-child':function(context,deep,withcontext){
		return this.nodeAt(context,deep,withcontext,0,1);
	},
	'last-child':function(context,deep,withcontext){
		return this.nodeAt(context,deep,withcontext,0,1,true);
	},
	'first-of-type':function(context){
		return this.nodeAt(context,deep,withcontext,0,1);
	},
	'last-of-type':function(context,n,b){
		return this.nodeAt(context,deep,withcontext,0,1,true);
	},
	'only-child':function(context,deep,withcontext){
		for (var i=0;i<context.length ; ) {
			if(this.childNodesCount(context[i].parentNode,true)!=1)
				context.splice(i,1);
			else
				i++;
		}
		return context;
	},
	'only-of-type':function(context,deep,withcontext){
		for (var i=0;i<context.length ; ) {
			if(this.childNodesCount(context[i].parentNode,true,context[i].tagName)!=1)
				context.splice(i,1);
			else
				i++;
		}
		return context;
	},
	empty:function(context,deep,withcontext){
		var ret=[];
		for (var i=0;i<context.length ;i++) {
			if (withcontext){
				if(0==this.childNodesCount(context[i],true))
					ret.push(context[i]);
			}else{
			}
		}
		return ret;
	},/*link:visited:active:hover:focus:target:lang:*/
	enabled:function(context,deep,withcontext){
		return this.checkAttr(context,deep,withcontext,'disabled',false);
	},
	disabled:function(context,deep,withcontext){
		return this.checkAttr(context,deep,withcontext,'disabled',true);
	},
	checked:function(context,deep,withcontext){
		return this.checkAttr(context,deep,withcontext,'checked','checked');
	}
});